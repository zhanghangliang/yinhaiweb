
package com.yinhai.common.webservice;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import cn.hutool.core.util.XmlUtil;
import cn.hutool.json.JSONObject;
import cn.hutool.json.XML;
import com.yinhai.common.webservice.result.DataException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

import javax.xml.namespace.QName;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPBodyElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPHeaderElement;
import javax.xml.soap.SOAPMessage;
import javax.xml.ws.Dispatch;
import javax.xml.ws.Service;
import javax.xml.xpath.XPathConstants;
import java.util.logging.Logger;

/**
 * This class was generated by Apache CXF 3.4.4
 * 2021-07-12T11:45:05.491+08:00
 * Generated source version: 3.4.4
 */
public class YinHaiBusinessImplPortClient {
    private static final Logger LOG = Logger.getLogger(YinHaiBusinessImplPortClient.class.getName());

    private static final QName SERVICE_NAME = new QName("http://webservice.common.yinhai.com/", "YinHaiBusiness");

    private static final String userName = "tftb";
    private static final String passWord = "tftb@119";
    private static final String implNS = "http://webservice.common.yinhai.com/";

    public static void main(String[] args) throws Exception {
        try {
            String res = send("callBusiness", "<inputxml><number>500107199608022013</number><chw017>01</chw017></inputxml>", "HM0004");
            LOG.info(res);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



    public static String send(String target, String inputJson, String jybh) throws Exception {
        LOG.info("target" + target);
        LOG.info("inputXml" + inputJson);
        LOG.info("jybh" + jybh);
        JSONObject jsonObject = new JSONObject(inputJson);

        String inputXml = XML.toXml(jsonObject);
        String baseInfo = getJylsh();

        String s = "{\"inputxml\": { \"number\":\"500107199608022013\", \"chw017\":\"01\" }}";
        Document document = XmlUtil.readXML(baseInfo);
        Object jylsh = XmlUtil.getByXPath("//output/jylsh", document, XPathConstants.STRING);
        Object jyyzm = XmlUtil.getByXPath("//output/jyyzm", document, XPathConstants.STRING);

        YinHaiBusinessService service = new YinHaiBusinessService(YinHaiBusinessService.WSDL_LOCATION, SERVICE_NAME);

        // 创建Dispatch (通过SOAPMessage传递)
        Dispatch<SOAPMessage> dispatch =
                // portName:wsdl文件中Service节点中的prot的name属性值的QName; type:消息类型; mode:消息传递的类型(message|payLoad)
                service.createDispatch(new QName(implNS, "YinHaiBusinessImplPort"), SOAPMessage.class, Service.Mode.MESSAGE);

        // 创建SoapMessage
        SOAPMessage message = MessageFactory.newInstance().createMessage();
        SOAPEnvelope envelope = message.getSOAPPart().getEnvelope();
        SOAPHeader header = envelope.getHeader();
        SOAPHeaderElement headerElement = header.addHeaderElement(new QName("http://yinhai.com", "system", "in"));
        headerElement.addChildElement("userName").setValue(userName);
        headerElement.addChildElement("passWord").setValue(passWord);
        headerElement.addChildElement("jylsh").setValue(jylsh.toString());
        headerElement.addChildElement("jyyzm").setValue(jyyzm.toString());
        headerElement.addChildElement("jybh").setValue(jybh);

        SOAPBody body = envelope.getBody();
        // 通过wsdl接口部分的命名空间创建消息的QNane，因为Message的描述在接口部分的命名空间中<span style="font-family: Arial, Helvetica, sans-serif;">（详见 六、附录 中的截图）</span>
        SOAPBodyElement bodyElement = body.addBodyElement(new QName(implNS, target, "ns2"));
        bodyElement.addChildElement("inputxml").setValue(decodeXml(inputXml));

        // 输出即将发送的Soap消息
//        message.writeTo(System.out);
        // 通过dispatch传递消息
        SOAPMessage responseMessage = dispatch.invoke(message);
        // 输出返回的Soap消息
        Node firstChild = responseMessage.getSOAPBody().getFirstChild().getFirstChild();
        try {
            JSONObject xmlJSONObj = XML.toJSONObject(firstChild.getTextContent());
            return xmlJSONObj.toString();
        } catch (Exception e) {
            throw new DataException("-1", firstChild.getTextContent());
        }
    }

    public static String getJylsh() throws Exception {
        YinHaiBusinessService service = new YinHaiBusinessService(YinHaiBusinessService.WSDL_LOCATION, SERVICE_NAME);

        Dispatch<SOAPMessage> dispatch = service.createDispatch(new QName(implNS, "YinHaiBusinessImplPort"), SOAPMessage.class, Service.Mode.MESSAGE);

        SOAPMessage message = MessageFactory.newInstance().createMessage();
        SOAPEnvelope envelope = message.getSOAPPart().getEnvelope();
        SOAPHeader header = envelope.getHeader();
        SOAPHeaderElement headerElement = header.addHeaderElement(new QName("http://yinhai.com", "system", "in"));
        headerElement.addChildElement("userName").setValue(userName);
        headerElement.addChildElement("passWord").setValue(passWord);
        headerElement.addChildElement("jybh").setValue("HM0001");
        headerElement.addChildElement("jylsh").setValue("");
        headerElement.addChildElement("jyyzm").setValue("");

        envelope.getBody().addBodyElement(new QName(implNS, "getJylsh", "ns2"));

        SOAPMessage responseMessage = dispatch.invoke(message);
        Node firstChild = responseMessage.getSOAPBody().getFirstChild().getFirstChild();
        return firstChild.getTextContent();
    }

    private static String decodeXml(String xml) {
        xml = xml.replaceAll("&lt;", "<");
        xml = xml.replaceAll("&gt;", ">");
        return xml;
    }
}
